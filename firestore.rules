rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Thise means everybody can read your DB.
    // This should be temporary, just to get started, but delete this line
    // and implement some rules like the commented out below.
    match /{document=**} {
      allow read: if true;
      allow write: if request.auth != null;
    }


    // Here are some basic examples you should use:

    // match /users/{userID} {
    //   allow create: if isUser(incomingData().uid);
    //   allow update: if isSignedIn() && isUser(existingData().uid);
    //   allow read, list: if true;
    // }

    // match /posts/{postId} {
    //   allow create: if isSignedIn()
    //   allow update, delete: if isSignedIn() && isUser(existingData().userId);
    //   allow read, list: if true;
    // }

    // Helper functions to create better rules
    function isSignedIn() {
      return request.auth != null;
    }

    function emailVerified() {
      return request.auth.token.email_verified;
    }

    function userExists() {
      return exists(/databases/$(database)/documents/users/$(request.auth.uid));
    }

    // [READ] Data that exists on the Firestore document
    function existingData() {
      return resource.data;
    }
    // [WRITE] Data that is sent to a Firestore document
    function incomingData() {
      return request.resource.data;
    }

    // Does the logged-in user match the requested userId?
    function isUser(userId) {
      return request.auth.uid == userId;
    }

    // Fetch a user from Firestore
    function getUserData() {
      return get(/databases/$(database)/documents/accounts/$(request.auth.uid)).data
    }

    // Fetch a user-specific field from Firestore
    function userEmail(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data.email;
    }
  }
}
